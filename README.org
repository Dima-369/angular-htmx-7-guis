* Angular and HTMX solutions to 7 GUIs

** Angular with Tailwind CSS

Live Demo: https://angular-7-guis.netlify.app

Funny note: If you have the Java backend server running under http://localhost:8083, the HTMX components in the Live Demo link above will also work!

[[https://github.com/Dima-369/angular-htmx-7-guis/blob/master/screenshots/1.png?raw=true]]

The 7 GUI tasks are detailed here: https://eugenkiss.github.io/7guis/tasks/

Run via

#+begin_src bash
ng serve
#+end_src

** Infos

Note that the Angular code assumes that the Java Sprint Boot server runs at http://localhost:8083 - but if it is not running, that's fine as well; the pure Angular components will still work just fine.

In development, I develop the Angular version first to have the UI going and then I jump into =Intellij= and code the entire backend solution over there. The HTMX is initiated like this, for example in =src/app/flight-booker-htmx/flight-booker-htmx.component.html=:

#+begin_src html
<form class="flex items-center" id="div-flight-booker"
      hx-get="http://localhost:8083/flight-booker-update"
      hx-trigger="load">
</form>
#+end_src

The way I used HTMX for those 7 GUI tasks is not optimal, as each user interactions triggers a network call to the Java backend and returns HTML. The HTMX solutions are generally slower in the millisecond range compared to the pure Angular ones, but the delay is minimal, at least when the server is accessed through localhost.

*** Timer HTMX solution

It currently polls at just 100ms. Using 30ms looks a lot smoother, but kind of spams the hardware, so it is not used. I suppose WebSockets are implemented with HTMX, this wouldn't be an issue.

With even smarter HTMX engineering, one could stop the 100ms refresh when the timer is finished and restart spamming the backend when the duration is changed or the Reset button hit.

-----

The Angular solution only uses one big =<table>= for its layout while the HTMX solution uses a =<form>= and has the duration and reset button UI elements outside the =<form>=, so clicking the Reset button is properly handled and not overriden by the 100ms update. Same with the duration =<input>=. The 100ms update would lead to one not being able to keep the mouse dragged since the element is replaced via HTMX.

* Java backend server for HTMX

The backend uses Spring Boot 3.1.5, Java 17, Gradle and Thymeleaf 3.1.2 and starts on port 8083 when launched.

#+begin_src bash
./gradlew bootRun
#+end_src

** About Hot Reloading

Apparently I was not able to configure Hot Reload with the backend server inside Intellij Community Edition, so I coded this Emacs Lisp to setup watchers on file changes and then restart the server manually which works just as well.

#+begin_src emacs-lisp
(defvar dima-spring-file-notifiers nil
  "A list of file notifiers.")

(defun dima-spring-file-notifier ()
  "Set `dima-spring-file-notifiers' to restar the server on changes."
  (--each dima-spring-file-notifiers
    (file-notify-rm-watch it))
  (setq dima-spring-file-notifiers
        (--map
         (file-notify-add-watch it '(change)
                                (lambda (event)
                                  (when (and
                                         (not (eq 'stopped (cl-second event)))
                                         (not (s-ends-with-p "~" (cl-third event))))
                                    (dima-spring-restart)
                                    (dima-notification-via-hammerspoon
                                     "Restarted for change in" (cl-third event)))))
         (f-directories "~/angular-htmx-7-guis/spring-boot/src/" nil t))))

(defun dima-spring-restart ()
  "Kill a running process and restart if needed."
  (when-let ((b (get-buffer "*~/angular-htmx-7-guis/spring-boot/gradlew bootRun*")))
    (let (kill-buffer-query-functions)
      (kill-buffer b)))
  (let ((default-directory "~/angular-htmx-7-guis/spring-boot/"))
    (dima-async-shell-command
     "~/angular-htmx-7-guis/spring-boot/gradlew bootRun"
     :on-failure (lambda (_)
                   (dima-notification-via-hammerspoon "Java Spring failed")))))

(dima-spring-restart)
(dima-spring-file-notifier)
(dima-firefox-open-links "http://localhost:8083")
#+end_src

* TODOs

- finish all tasks (4 / 7 done) in Angular and HTMX
- add tests for the non HTMX Components
- brush over DRY principal everywhere (stick to refactor when duplicated >= 3 times)
