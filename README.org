* Angular and HTMX solutions to 7 GUIs

Live Demo: https://angular-7-guis.netlify.app

Funny note: If you have the Java backend server running under http://localhost:8083, the HTMX components in the Live Demo link above will also work!

[[https://github.com/Dima-369/angular-htmx-7-guis/blob/master/screenshots/1.png?raw=true]]

The 7 GUI tasks are detailed here: https://eugenkiss.github.io/7guis/tasks/

** Infos

Note that the Angular code assumes that the Java Sprint Boot server runs at http://localhost:8083 - but if it is not running, that's fine as well; the pure Angular components will still work just fine.

In development, I develop the Angular version first to have the UI going and then I jump into =Intellij= and code the entire backend solution over there. The HTMX is initiated like this, for example in =src/app/flight-booker-htmx/flight-booker-htmx.component.html=:

#+begin_src html
<form class="flex items-center" id="div-flight-booker"
      hx-get="http://localhost:8083/flight-booker-update"
      hx-trigger="load">
</form>
#+end_src

HTMX is not optimal for the 7 GUI tasks, as each user interactions triggers a network call to the Java backend and returns HTML. The HTMX solutions are generally slower in the millisecond range compared to the pure Angular ones, but the delay is minimal, at least when the server is accessed through localhost.

Nevertheless, I personally find the pure HTMX solutions more enjoyable, as working with Java is fun!

* Java backend server for HTMX

The backend uses Spring Boot 3.1.5, Java 17, Gradle and Thymeleaf 3.1.2 and starts on port 8083 when launched.

#+begin_src bash
./gradlew bootRun
#+end_src

** About Hot Reloading

Apparently I was not able to configure Hot Reload with the backend server inside of Intellij Community Edition, so I coded this Emacs Lisp to setup file notifiers and then restart the server manually which works just as well.

#+begin_src emacs-lisp
(defvar dima-spring-file-notifiers nil
  "A list of file notifiers.")

(defun dima-spring-file-notifier ()
  "Set `dima-spring-file-notifiers' to restar the server on changes."
  (--each dima-spring-file-notifiers
    (file-notify-rm-watch it))
  (setq dima-spring-file-notifiers
        (--map
         (file-notify-add-watch it '(change)
                                (lambda (event)
                                  (when (and
                                         (not (eq 'stopped (cl-second event)))
                                         (not (s-ends-with-p "~" (cl-third event))))
                                    (dima-spring-restart)
                                    (dima-notification-via-hammerspoon
                                     "Restarted for change in" (cl-third event)))))
         (f-directories "~/angular-htmx-7-guis/spring-boot/src/" nil t))))

(defun dima-spring-restart ()
  "Kill a running process and restart if needed."
  (when-let ((b (get-buffer "*~/angular-htmx-7-guis/spring-boot/gradlew bootRun*")))
    (let (kill-buffer-query-functions)
      (kill-buffer b)))
  (let ((default-directory "~/angular-htmx-7-guis/spring-boot/"))
    (dima-async-shell-command
     "~/angular-htmx-7-guis/spring-boot/gradlew bootRun"
     :on-failure (lambda (_)
                   (dima-notification-via-hammerspoon "Java Spring failed")))))

(dima-spring-restart)
(dima-spring-file-notifier)
(dima-firefox-open-links "http://localhost:8083")
#+end_src

* TODOs

- finish all tasks (3.5 / 7 done) in Angular and HTMX
- add tests for the non HTMX Components
- brush over DRY principal everywhere (stick to refactor when duplicated >= 3 times)
